---
layout: post
title: "백준 24916 용암 점프"
date: 2023-12-09 00:45:30 +0900
tags: PS 문제해결
---

## 백준 [24916 용암 점프](https://www.acmicpc.net/problem/24916)

경기과학고등학교 학습실에는 때때로 용암이 찬다. 이 용암 바닥에 왼쪽에서 오른쪽으로 $$1$$부터 $$N$$까지의 정수 번호가 매겨진 N 개의 발판이 떠 있다. $$i$$의 번호가 매겨진 발판의 위치는 하나의 정수 $$a_i$$로 표현되며, 각 발판의 위치는 서로 다르다. 다시 말해, 1 ≤ $$i$$ < $$j$$ ≤ $$N$$인 두 정수 $$i$$, $$j$$에 대하여 $$a_i$$ < $$a_j$$이다. 용암 바닥은 밟을 수 없으며, 발판만 밟을 수 있다. 안타깝게도, 한 번 밟은 발판은 발판에서 발을 떼는 순간 용암 바닥 아래로 영원히 가라앉아 다시 밟을 수 없게 된다.

정후는 정후의 친구 이환이가 각 위치 $$a_i$$에서 몇 번의 점프를 통해 마지막에 밟고 있는 하나의 발판을 제외한 모든 발판을 가라앉게 할 수 있는지 궁금하다. 하지만 운동 과잉인 이환이는 한 번 $$x$$만큼의 거리를 뛴 이후에는 $$2x$$ 이상만큼의 거리만을 뛸 수 있다. 처음에는 어느 거리를 뛰어도 상관없다.

---

### 개요

2023년 12월 9일 기준 플래티넘3의 문제다.

태그에 `다이나믹 프로그래밍`, `그리디 알고리즘`, `애드 혹`이 있다.

### 풀이

```cpp
#include <iostream>
#include <algorithm>
#define MAX 100001
using namespace std;

int arr[MAX], N;

bool solve(int l, int r, int cur, int x)
{
    int to_r = r < N - 1 ? arr[r + 1] - arr[cur] : -1;
    int to_l = l > 0 ? arr[cur] - arr[l - 1] : -1;

    if (0 < l && r < N - 1)
    {
        if (min(to_r, to_l) < 2 * x)
            return false;

        if (to_r < to_l)
            return solve(l, r + 1, r + 1, to_r);
        else if (to_r > to_l)
            return solve(l - 1, r, l - 1, to_l);
        else
            return solve(l, r + 1, r + 1, to_r) || solve(l - 1, r, l - 1, to_l);
    }
    else if (0 < l)
        return to_l >= 2 * x ? solve(l - 1, r, l - 1, to_l) : false;
    else if (r < N - 1)
        return to_r >= 2 * x ? solve(l, r + 1, r + 1, to_r) : false;
    else
        return true;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int T;
    cin >> T;

    while (T--)
    {
        cin >> N;
        for (int i = 0; i < N; i++)
            cin >> arr[i];

        if (N >= 22 || arr[N - 1] - arr[0] < 1 << (N - 2))
        {
            for (int i = 0; i < N; i++)
                cout << "NO\n";
            continue;
        }

        for (int i = 0; i < N; i++)
            cout << (solve(i, i, i, 0) ? "YES" : "NO") << '\n';
    }
}

```

>

테스트 케이스의 수가 많고 $$N$$의 범위가 크기 때문에 O($$KN$$)의 알고리즘도 통과하지 못한다.

그러나 $$N$$의 범위를 줄일 수 있다.

발판이 $$N$$개 있다면 $$N-1$$번의 이동이 필요하다. 그러면 처음에 아무리 작게 이동해 $$1$$만 이동했다고 해도 마지막에는 $$2^{N-1}$$이나 이동해야 한다.

따라서 발판 사이 최대 거리인 $$2\times 10^6$$보다 $$2^{N-1}$$가 작아야 하고 이를 계산해 주면 $$N\le 21$$이 나온다.

결국 $$N$$이 $$22$$ 이상이라면 모든 경우에 대해 `NO`를 출력해 주면 된다.

이후에는 약간의 관찰이 필요하다. $$d_i$$를 $$a_i$$와 $$a_{i+1}$$ 사이 거리라고 하자.

만약 밟지 않은 한 발판을 건너뛰면 $$d_i+d_{i+1}$$만큼 갔으므로 $$a_{i+1}$$에 도달할 수가 없다.

그리고 $$i$$번째에서 양옆에 있는 발판까지의 거리가 다를 때 더 긴쪽($$a_{i-1}$$)로 가면 $$d_{i-1}+d_i<2\times d_{i-1}$$이기 때문에 더 가까운 발판을 무조건 택해야 한다.

따라서 현재 발판에서 가장 가까운 발판을 택해야 한다고 할 수 있다.

그러므로 양옆의 발판 사이 거리가 다를 땐 더 가까운 발판으로 가주고 사이 거리가 같다면 두 경우 모두 확인해 주면 해결할 수 있다.

이 방법으로 구현했을 때 파이썬으로 해결하지 못했기 때문에 C++로 코드를 작성했다.
